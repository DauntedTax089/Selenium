{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-12T12:09:12.281Z",
    "end": "2023-11-12T12:09:34.213Z",
    "duration": 21932,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "274ccd9a-cbc7-4b13-8d71-fec504ed451a",
      "title": "",
      "fullFile": "D:\\Calisto\\Analista de QA\\Portfólio\\SeleniumWithJavaScrypt\\sauceDemoGreen_standard_user\\test\\loginFunctionality.js",
      "file": "\\test\\loginFunctionality.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c3bedbca-af39-41ab-938e-ccdc29274866",
          "title": "loginFunctionality",
          "fullFile": "D:\\Calisto\\Analista de QA\\Portfólio\\SeleniumWithJavaScrypt\\sauceDemoGreen_standard_user\\test\\loginFunctionality.js",
          "file": "\\test\\loginFunctionality.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login com sucesso",
              "fullTitle": "loginFunctionality Login com sucesso",
              "timedOut": null,
              "duration": 2503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login foi feito com sucesso;\n        let productsText = await driver.findElement(By.xpath(\"/html/body/div/div/div/div[1]/div[2]/span\")).getText().then(function (value) { return value })\n        productsText.should.equal(\"Products\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "4e8c050f-4359-4bad-9cf4-cf6002a7a1ac",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com username inválido",
              "fullTitle": "loginFunctionality Login com username inválido",
              "timedOut": null,
              "duration": 2526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"vasco_da_gama\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"vasco_da_gama\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "18b9f6db-5e5e-4c3a-88d9-ffd1e8fc3253",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com password inválido",
              "fullTitle": "loginFunctionality Login com password inválido",
              "timedOut": null,
              "duration": 2933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"vasco_da_gama\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"vasco_da_gama\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "d02b7fcb-ce8d-4b7e-b914-1ec8a2393551",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com credenciais trocadas",
              "fullTitle": "loginFunctionality Login com credenciais trocadas",
              "timedOut": null,
              "duration": 2611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"secret_sauce\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"secret_sauce\");\n        //Inserir password: \"standard_user\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"standard_user\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado;\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "073568c5-3df3-4bfd-b48b-020462206773",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com username MAIÚSCULO",
              "fullTitle": "loginFunctionality Login com username MAIÚSCULO",
              "timedOut": null,
              "duration": 2230,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"STANDARD_USER\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"STANDARD_USER\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "ea1163ee-b954-4404-b5e9-34a566f702e6",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com password MAIÚSCULO",
              "fullTitle": "loginFunctionality Login com password MAIÚSCULO",
              "timedOut": null,
              "duration": 2099,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"SECRET_SAUCE\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"SECRET_SAUCE\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "c02b5cac-2bfb-4905-b30e-e409935f8cbe",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login sem username",
              "fullTitle": "loginFunctionality Login sem username",
              "timedOut": null,
              "duration": 2196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "02f11e27-f35d-49c8-bb0e-8e14967f487b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login sem password",
              "fullTitle": "loginFunctionality Login sem password",
              "timedOut": null,
              "duration": 2049,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Password is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "944cf91f-b187-4ee6-901f-e677a4fea6cf",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login sem credenciais",
              "fullTitle": "loginFunctionality Login sem credenciais",
              "timedOut": null,
              "duration": 2267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"\");\n        //Inserir password: \"\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "0981fae3-85d3-47b1-bbad-74392bac59dc",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e8c050f-4359-4bad-9cf4-cf6002a7a1ac",
            "18b9f6db-5e5e-4c3a-88d9-ffd1e8fc3253",
            "d02b7fcb-ce8d-4b7e-b914-1ec8a2393551",
            "073568c5-3df3-4bfd-b48b-020462206773",
            "ea1163ee-b954-4404-b5e9-34a566f702e6",
            "c02b5cac-2bfb-4905-b30e-e409935f8cbe",
            "02f11e27-f35d-49c8-bb0e-8e14967f487b",
            "944cf91f-b187-4ee6-901f-e677a4fea6cf",
            "0981fae3-85d3-47b1-bbad-74392bac59dc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 21414,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}