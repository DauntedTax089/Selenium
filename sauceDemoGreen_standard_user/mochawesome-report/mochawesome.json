{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-12T12:16:47.499Z",
    "end": "2023-11-12T12:17:16.287Z",
    "duration": 28788,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6d294fa0-3c53-4177-8322-c2c10336c4fa",
      "title": "",
      "fullFile": "D:\\Calisto\\Analista de QA\\Portfólio\\SeleniumWithJavaScrypt\\sauceDemoGreen_standard_user\\test\\loginFunctionality.js",
      "file": "\\test\\loginFunctionality.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bee62e6e-0e1a-4764-938a-cdf599b20f8a",
          "title": "loginFunctionality",
          "fullFile": "D:\\Calisto\\Analista de QA\\Portfólio\\SeleniumWithJavaScrypt\\sauceDemoGreen_standard_user\\test\\loginFunctionality.js",
          "file": "\\test\\loginFunctionality.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Login com sucesso",
              "fullTitle": "loginFunctionality Login com sucesso",
              "timedOut": null,
              "duration": 2725,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login foi feito com sucesso;\n        let productsText = await driver.findElement(By.xpath(\"/html/body/div/div/div/div[1]/div[2]/span\")).getText().then(function (value) { return value })\n        productsText.should.equal(\"Products\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "5bd67bec-f44d-4288-abae-2899135f492c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com username inválido",
              "fullTitle": "loginFunctionality Login com username inválido",
              "timedOut": null,
              "duration": 2245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"vasco_da_gama\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"vasco_da_gama\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "ee331b70-07a4-420c-af6f-24d1b088e42b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com password inválido",
              "fullTitle": "loginFunctionality Login com password inválido",
              "timedOut": null,
              "duration": 2220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"vasco_da_gama\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"vasco_da_gama\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "82997201-f586-4c14-9cbe-359aff6c909a",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com credenciais trocadas",
              "fullTitle": "loginFunctionality Login com credenciais trocadas",
              "timedOut": null,
              "duration": 1987,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"secret_sauce\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"secret_sauce\");\n        //Inserir password: \"standard_user\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"standard_user\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado;\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "2132e273-c7e0-4502-8a87-fb28869059ff",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com username MAIÚSCULO",
              "fullTitle": "loginFunctionality Login com username MAIÚSCULO",
              "timedOut": null,
              "duration": 2204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"STANDARD_USER\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"STANDARD_USER\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "9bd9ff8e-ee9e-4157-b4fa-5a29179b599b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com password MAIÚSCULO",
              "fullTitle": "loginFunctionality Login com password MAIÚSCULO",
              "timedOut": null,
              "duration": 2105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"SECRET_SAUCE\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"SECRET_SAUCE\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "03213c65-c1d8-472d-8bdc-b85af9ef1f49",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login sem username",
              "fullTitle": "loginFunctionality Login sem username",
              "timedOut": null,
              "duration": 2330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "71274dde-cddf-440c-a3a8-948bc43aabfc",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login sem password",
              "fullTitle": "loginFunctionality Login sem password",
              "timedOut": null,
              "duration": 2072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Password is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "05b5c531-ce8e-412f-bd17-b1dfbc8675b4",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login sem credenciais",
              "fullTitle": "loginFunctionality Login sem credenciais",
              "timedOut": null,
              "duration": 1961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"\");\n        //Inserir password: \"\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "0314bba4-27ef-45f2-9b3b-0d98456be88c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com espaço antes de username",
              "fullTitle": "loginFunctionality Login com espaço antes de username",
              "timedOut": null,
              "duration": 2085,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \" standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\" standard_user\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "a5f49097-bb93-4166-a3bb-2ca71a771ba2",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com espaço depois de username",
              "fullTitle": "loginFunctionality Login com espaço depois de username",
              "timedOut": null,
              "duration": 2027,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user \"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user \");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "36f2d909-00c3-4db8-83b0-c9e525884882",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com espaço antes de password",
              "fullTitle": "loginFunctionality Login com espaço antes de password",
              "timedOut": null,
              "duration": 2144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \" secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\" secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "82a2e9d5-cab9-4d15-8817-ebed2c0bf60b",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Login com espaço depois de password",
              "fullTitle": "loginFunctionality Login com espaço depois de password",
              "timedOut": null,
              "duration": 2061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"secret_sauce \"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce \");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div/div/div[2]/div[1]/div/div/form/div[3]/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "293f28cf-98b6-4af2-9079-fb4f91cf24c3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bd67bec-f44d-4288-abae-2899135f492c",
            "ee331b70-07a4-420c-af6f-24d1b088e42b",
            "82997201-f586-4c14-9cbe-359aff6c909a",
            "2132e273-c7e0-4502-8a87-fb28869059ff",
            "9bd9ff8e-ee9e-4157-b4fa-5a29179b599b",
            "03213c65-c1d8-472d-8bdc-b85af9ef1f49",
            "71274dde-cddf-440c-a3a8-948bc43aabfc",
            "05b5c531-ce8e-412f-bd17-b1dfbc8675b4",
            "0314bba4-27ef-45f2-9b3b-0d98456be88c",
            "a5f49097-bb93-4166-a3bb-2ca71a771ba2",
            "36f2d909-00c3-4db8-83b0-c9e525884882",
            "82a2e9d5-cab9-4d15-8817-ebed2c0bf60b",
            "293f28cf-98b6-4af2-9079-fb4f91cf24c3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28166,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}