{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2023-11-13T21:41:41.276Z",
    "end": "2023-11-13T21:42:05.320Z",
    "duration": 24044,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "57030746-aa40-4b49-8248-420e54b622f3",
      "title": "",
      "fullFile": "D:\\Calisto\\Analista de QA\\Portfólio\\SeleniumWithJavaScrypt\\sauceDemoRed_standard_user\\test\\loginFuncionality.js",
      "file": "\\test\\loginFuncionality.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e3022694-4fc4-44ad-93eb-43b1bd853484",
          "title": "loginFunctionality",
          "fullFile": "D:\\Calisto\\Analista de QA\\Portfólio\\SeleniumWithJavaScrypt\\sauceDemoRed_standard_user\\test\\loginFuncionality.js",
          "file": "\\test\\loginFuncionality.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC01_loginSuccessfully",
              "fullTitle": "loginFunctionality TC01_loginSuccessfully",
              "timedOut": null,
              "duration": 1701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\nlet driver = await new Builder().forBrowser(\"chrome\").build();\n//Acessar site\nawait driver.get(\"https://www.saucedemo.com/v1/index.html\");\n//Inserir nome de usuário: \"standard_user\"\nawait driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n//Inserir password: \"secret_sauce\"\nawait driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n//Clicar no botão login;\nawait driver.findElement(By.id(\"login-button\")).click();\n//Assertion - Verificar se o login foi feito com sucesso;\nlet productsText = await driver.findElement(By.xpath(\"/html/body/div/div[2]/div[2]/div/div[1]/div[3]/div\")).getText().then(function (value) { return value })\nproductsText.should.equal(\"Products\")\n//Fechar o navegador\nawait driver.quit();",
              "err": {},
              "uuid": "70315185-5c97-4315-ba32-7e45a7de7646",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC02_invalidUsername",
              "fullTitle": "loginFunctionality TC02_invalidUsername",
              "timedOut": null,
              "duration": 1417,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"vasco_da_gama\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"vasco_da_gama\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "3da6fe6c-7879-4f6f-9a4c-727c11ad598d",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC03_invalidPassword",
              "fullTitle": "loginFunctionality TC03_invalidPassword",
              "timedOut": null,
              "duration": 1798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"vasco_da_gama\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"vasco_da_gama\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "8c8726b0-623f-43c4-b488-ed7eba54542c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC04_changedCredentials",
              "fullTitle": "loginFunctionality TC04_changedCredentials",
              "timedOut": null,
              "duration": 2035,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"secret_sauce\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"secret_sauce\");\n        //Inserir password: \"standard_user\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"standard_user\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado;\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "d1dbb564-58ff-4756-8192-1844d7a91651",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC05_capitalUsername",
              "fullTitle": "loginFunctionality TC05_capitalUsername",
              "timedOut": null,
              "duration": 2373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"STANDARD_USER\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"STANDARD_USER\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "415f6641-dc67-4ad9-91dd-42b8eedbb09c",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC06_capitalPassword",
              "fullTitle": "loginFunctionality TC06_capitalPassword",
              "timedOut": null,
              "duration": 2076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"SECRET_SAUCE\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"SECRET_SAUCE\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username and password do not match\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "360d68c3-9c3a-468f-9a61-71e3fba209f2",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC07_withoutUsername",
              "fullTitle": "loginFunctionality TC07_withoutUsername",
              "timedOut": null,
              "duration": 1850,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Username is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "77526e67-ecdd-4d4c-b1ca-a641a181146f",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC08_withoutPassword",
              "fullTitle": "loginFunctionality TC08_withoutPassword",
              "timedOut": null,
              "duration": 1786,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.contain(\"Password is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "8b9f75b4-8f43-46c6-9bab-f7dee0b6b438",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC09_withoutCredentials",
              "fullTitle": "loginFunctionality TC09_withoutCredentials",
              "timedOut": null,
              "duration": 1530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"\");\n        //Inserir password: \"\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username is required\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "b6a9c468-f8e4-4368-869a-bc743cff1cc9",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC10_backspaceBeforeUsername",
              "fullTitle": "loginFunctionality TC10_backspaceBeforeUsername",
              "timedOut": null,
              "duration": 1751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \" standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\" standard_user\");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "e95da6c2-9700-4df9-adb1-56bb5c6979c8",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC11_backspaceAfterUsername",
              "fullTitle": "loginFunctionality TC11_backspaceAfterUsername",
              "timedOut": null,
              "duration": 1706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"standard_user \"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user \");\n        //Inserir password: \"secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "19f1cafe-09c1-487e-b7b9-31385041aabd",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC12_backspaceBeforePassword",
              "fullTitle": "loginFunctionality TC12_backspaceBeforePassword",
              "timedOut": null,
              "duration": 1896,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \" secret_sauce\"\n        await driver.findElement(By.id(\"password\")).sendKeys(\" secret_sauce\");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "479050d9-f238-4f1f-a735-c72f4bde8e62",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC13_backspaceAfterPassword",
              "fullTitle": "loginFunctionality TC13_backspaceAfterPassword",
              "timedOut": null,
              "duration": 1715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Construir o driver para o navegador\n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //Acessar site\n        await driver.get(\"https://www.saucedemo.com/v1/index.html\");\n        //Inserir nome de usuário: \"standard_user\"\n        await driver.findElement(By.id(\"user-name\")).sendKeys(\"standard_user\");\n        //Inserir password: \"secret_sauce \"\n        await driver.findElement(By.id(\"password\")).sendKeys(\"secret_sauce \");\n        //Clicar no botão login;\n        await driver.findElement(By.id(\"login-button\")).click();\n        //Assertion - Verificar se o login não foi realizado\n        let userinvalidText = await driver.findElement(By.xpath(\"/html/body/div[2]/div[1]/div/div/form/h3\")).getText().then(function (value) { return value })\n        userinvalidText.should.equal(\"Epic sadface: Username and password do not match any user in this service\")\n        //Fechar o navegador\n        await driver.quit();",
              "err": {},
              "uuid": "de2ef3f3-72f8-4f0a-b693-80c052fbf3ed",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70315185-5c97-4315-ba32-7e45a7de7646",
            "3da6fe6c-7879-4f6f-9a4c-727c11ad598d",
            "8c8726b0-623f-43c4-b488-ed7eba54542c",
            "d1dbb564-58ff-4756-8192-1844d7a91651",
            "415f6641-dc67-4ad9-91dd-42b8eedbb09c",
            "360d68c3-9c3a-468f-9a61-71e3fba209f2",
            "77526e67-ecdd-4d4c-b1ca-a641a181146f",
            "8b9f75b4-8f43-46c6-9bab-f7dee0b6b438",
            "b6a9c468-f8e4-4368-869a-bc743cff1cc9",
            "e95da6c2-9700-4df9-adb1-56bb5c6979c8",
            "19f1cafe-09c1-487e-b7b9-31385041aabd",
            "479050d9-f238-4f1f-a735-c72f4bde8e62",
            "de2ef3f3-72f8-4f0a-b693-80c052fbf3ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23634,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}